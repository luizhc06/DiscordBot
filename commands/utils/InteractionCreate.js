const { COLORS } = require('../../utils/colors');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction) {
    try {
      console.log('Intera√ß√£o recebida:', interaction.customId); // Log para verificar o ID da intera√ß√£o
      console.log('Tipo de intera√ß√£o:', interaction.type); // Log para verificar o tipo de intera√ß√£o

      if (!interaction.isStringSelectMenu()) {
        console.log('Intera√ß√£o ignorada: n√£o √© um menu de sele√ß√£o.');
        return;
      }

      if (interaction.customId !== 'color-roles') {
        console.log(`Intera√ß√£o ignorada: customId esperado "color-roles", recebido "${interaction.customId}".`);
        return;
      }

      // Responde imediatamente para evitar falha por tempo limite
      await interaction.deferReply({ ephemeral: true });
      console.log('Resposta deferida com sucesso.');

      if (!interaction.guild) {
        console.log('Intera√ß√£o falhou: guild n√£o encontrado.');
        return interaction.editReply({ content: '‚ùå Este comando s√≥ pode ser usado em servidores.' });
      }

      const value = interaction.values[0];
      console.log('Valor selecionado no menu:', value); // Log para verificar o valor selecionado

      const role = interaction.guild.roles.cache.get(value);
      if (!role) {
        console.log(`Cargo n√£o encontrado para o valor: ${value}`);
        return interaction.editReply({ content: '‚ùå Cargo n√£o encontrado.' });
      }

      console.log('Cargo encontrado:', role.name); // Log para verificar o cargo encontrado

      const member = interaction.member;
      console.log('Usu√°rio que interagiu:', member.user.tag); // Log para verificar o usu√°rio

      const hasRole = member.roles.cache.has(role.id);
      console.log(`Usu√°rio j√° possui o cargo? ${hasRole}`); // Log para verificar se o usu√°rio j√° possui o cargo

      // Remove outras cores
      const allColorIds = COLORS.map(c => c.roleId).filter(id => id); // Filtra apenas IDs v√°lidos
      console.log('IDs de cargos de cores dispon√≠veis:', allColorIds); // Log para verificar os IDs de cargos de cores

      const rolesToRemove = member.roles.cache.filter(r => allColorIds.includes(r.id));
      console.log('Cargos a serem removidos:', rolesToRemove.map(r => r.name)); // Log para verificar os cargos que ser√£o removidos

      await member.roles.remove(rolesToRemove);
      console.log('Cargos removidos com sucesso.');

      // Adiciona ou remove a role selecionada
      if (!hasRole) {
        await member.roles.add(role);
        console.log(`Cargo ${role.name} adicionado ao usu√°rio.`);
        return interaction.editReply({ content: `‚úÖ Cargo **${role.name}** adicionado!` });
      } else {
        console.log(`Cargo ${role.name} j√° estava atribu√≠do ao usu√°rio.`);
        return interaction.editReply({ content: `üîª Cargo **${role.name}** j√° estava atribu√≠do.` });
      }
    } catch (error) {
      console.error('Erro ao processar a intera√ß√£o:', error); // Log para capturar erros
      return interaction.editReply({ content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.' });
    }
  },
};